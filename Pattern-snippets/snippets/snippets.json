{
  "pat:mvc": {
    "prefix": "pat:mvc",
    "body": [
      "class $1Model:",
      "\tdef __init__(self) -> None:",
      "\t\tpass",
      "",
      "class $1View:",
      "\tdef __init__(self, model: $1Model) -> None:",
      "\t\tself.model = model",
      "",
      "class $1Controller:",
      "\tdef __init__(self, model: $1Model, view: $1View) -> None:",
      "\t\tself.model = model",
      "\t\tself.view = view"
    ],
    "description": "MVC pattern scheme"
  },
  "MVC pattern implementation": {
    "prefix": "pat:mvc:impl",
    "body": [
      "from abc import ABC, abstractmethod",
      "",
      "",
      "class Model(ABC):",
      "\t@abstractmethod",
      "\tdef __iter__(self):",
      "\t\tpass",
      "",
      "\t@abstractmethod",
      "\tdef get(self, item):",
      "\t\t\"\"\"Returns an object with a .items() call method",
      "\t\tthat iterates over key,value pairs of its information.\"\"\"",
      "\t\tpass",
      "",
      "\t@property",
      "\t@abstractmethod",
      "\tdef item_type(self):",
      "\t\tpass",
      "",
      "",
      "class ProductModel(Model):",
      "\tclass Price(float):",
      "\t\t\"\"\"A polymorphic way to pass a float with a particular",
      "\t\t__str__ functionality.\"\"\"",
      "",
      "\t\tdef __str__(self):",
      "\t\t\treturn \"{:.2f}\".format(self)",
      "",
      "\tproducts = {",
      "\t\t\"milk\": {\"price\": Price(1.50), \"quantity\": 10},",
      "\t\t\"eggs\": {\"price\": Price(0.20), \"quantity\": 100},",
      "\t\t\"cheese\": {\"price\": Price(2.00), \"quantity\": 10},",
      "\t}",
      "",
      "\titem_type = \"product\"",
      "",
      "\tdef __iter__(self):",
      "\t\tyield from self.products",
      "",
      "\tdef get(self, product):",
      "\t\ttry:",
      "\t\t\treturn self.products[product]",
      "\t\texcept KeyError as e:",
      "\t\t\traise KeyError(str(e) + \" not in the model's item list.\")",
      "",
      "",
      "class View(ABC):",
      "\t@abstractmethod",
      "\tdef show_item_list(self, item_type, item_list):",
      "\t\tpass",
      "",
      "\t@abstractmethod",
      "\tdef show_item_information(self, item_type, item_name, item_info):",
      "\t\t\"\"\"Will look for item information by iterating over key,value pairs",
      "\t\tyielded by item_info.items()\"\"\"",
      "\t\tpass",
      "",
      "\t@abstractmethod",
      "\tdef item_not_found(self, item_type, item_name):",
      "\tpass",
      "",
      "",
      "class ConsoleView(View):",
      "\tdef show_item_list(self, item_type, item_list):",
      "\t\tprint(item_type.upper() + \" LIST:\")",
      "\t\tfor item in item_list:",
      "\t\t\tprint(item)",
      "\t\tprint(\"\")",
      "",
      "\t@staticmethod",
      "\tdef capitalizer(string):",
      "\t\treturn string[0].upper() + string[1:].lower()",
      "",
      "\tdef show_item_information(self, item_type, item_name, item_info):",
      "\t\tprint(item_type.upper() + \" INFORMATION:\")",
      "\t\tprintout = \"Name: %s\" % item_name",
      "\t\tfor key, value in item_info.items():",
      "\t\t\tprintout += \", \" + self.capitalizer(str(key)) + \": \" + str(value)",
      "\t\tprintout += \"\\n\"",
      "\t\tprint(printout)",
      "",
      "\tdef item_not_found(self, item_type, item_name):",
      "\tprint('That {} \"{}\" does not exist in the records'.format(item_type, item_name))",
      "",
      "",
      "class Controller:",
      "\tdef __init__(self, model, view):",
      "\t\tself.model = model",
      "\t\tself.view = view",
      "",
      "\tdef show_items(self):",
      "\t\titems = list(self.model)",
      "\t\titem_type = self.model.item_type",
      "\t\tself.view.show_item_list(item_type, items)",
      "",
      "\tdef show_item_information(self, item_name):",
      "\t\ttry:",
      "\t\t\titem_info = self.model.get(item_name)",
      "\t\texcept Exception:",
      "\t\t\titem_type = self.model.item_type",
      "\t\t\tself.view.item_not_found(item_type, item_name)",
      "\t\telse:",
      "\t\t\titem_type = self.model.item_type",
      "\t\t\tself.view.show_item_information(item_type, item_name, item_info)",
      ""
    ],
    "description": "MVC pattern implementation"
  }
}